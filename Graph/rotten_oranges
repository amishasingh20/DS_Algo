/*
Output: 1

Time Complexity: O(NxM + NxMx4) ~ O(N x M), For the worst case, all of the cells will have fresh oranges, so the BFS function will be called for (N x M) nodes and for every node, we are traversing for 4 neighbours, it will take O(N x M x 4) time.

Space Complexity ~ O(N x M), O(N x M) for copied input array and recursive stack space takes up N x M locations at max. 
*/

#include <bits/stdc++.h>
using namespace std;

class Solution{
public:
    int orangesRotting(vector<vector<int>>& grid){
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<pair<int,int>, int>> q;
        int tm = 0;
        int vis[n][m];
        int cnt_fresh_oranges = 0;

        for(int i = 0; i<n; i++) {
            for(int j = 0; j<m; j++){
                if(grid[i][j] ==2){
                    vis[i][j] = 2;
                    q.push({{i,j},0});
                } else {
                    vis[i][j] = 0;
                }

                if(grid[i][j] ==1)
                    cnt_fresh_oranges++;
            }
        }

        int delrow[] = {-1,0,1,0};
        int delcol[] = {0,1,0,-1};
 
        while (!q.empty())
        {
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            q.pop();
            tm = max(tm,t);

            for(int i = 0; i<4; i++){
                int nr = r + delrow[i];
                int nc = c + delcol[i];
                if(nr >= 0 && nr < n && nc >=0 && nc < m && vis[nr][nc] == 0 && grid[nr][nc] ==1){
                    q.push({{nr,nc},t+1});
                    vis[nr][nc] = 2;
                    cnt_fresh_oranges--;
                }
            }
        }
        
        if(cnt_fresh_oranges == 0)
            return tm;
        
        return -1;
    }
};

int main(){
    vector<vector<int>> grid{
        {0,1,2},
        {0,1,2},
        {2,1,1}
    };
    
    Solution obj;
    cout << obj.orangesRotting(grid) << endl;

    return 0;
}