/*
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
SC: O(N)[stack for recurrsion] + O(N)[visited array]
TC: O(N)[run N times for vertices] + O(V+2E)[for each node partial dfs is done and when we traverse all the
nodes then full dfs happens hence the time complexity is this and no O(N)*O(V+2E)]
*/

#include <bits/stdc++.h>
using namespace std;

class Solution {

void dfs(int node, vector<int> adj[], vector<int>& vis){
    vis[node] = 1;
    for(auto it: adj[node]){
        if(!vis[it]){
            dfs(it,adj,vis);
        }
    }
}

public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int V = isConnected.size(), count = 0;
        vector<int> Ls[V];
        for(int i = 0; i<V; i++){
            for(int j = 0; j<V; j++){
                if(isConnected[i][j]==1 && j !=i ){
                    Ls[i].push_back(j);
                    Ls[j].push_back(i);
                }
            }
        }

        vector<int> vis(V,0);
        for(int i = 0; i<V; i++){
            if(!vis[i]){
                count++;
                dfs(i,Ls,vis);
            }
        }

        return count;
    }
};

int main(){

    vector<vector<int>> adj{
        {1,1,0},{1,1,0},{0,0,1}
    };

    Solution obj;
    auto ans = obj.findCircleNum(adj);
    cout << "Number of provinces is " << ans << endl;
    return 0;
}