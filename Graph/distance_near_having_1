/*
https://takeuforward.org/graph/distance-of-nearest-cell-having-1/
Output:  

1 0 0 1 
0 0 1 1 
1 1 0 0 

Time Complexity: O(NxM + NxMx4) ~ O(N x M)

For the worst case, the BFS function will be called for (N x M) nodes, and for every node, we are traversing for 4 neighbors, so it will take O(N x M x 4) time.

Space Complexity: O(N x M) + O(N x M) + O(N x M) ~ O(N x M)

O(N x M) for the visited array, distance matrix, and queue space takes up N x M locations at max. 
*/
#include <bits/stdc++.h>

using namespace std;

class Solution{
public:
    vector<vector<int>> nearest(vector<vector<int>> grid){
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        vector<vector<int>> dis(n,vector<int>(m,0));
        queue<pair<pair<int,int>,int>> q;

        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(grid[i][j]==1){
                    q.push({{i,j},0});
                    vis[i][j] = 1;
                }
            }
        }
        //at this point all the 1's are in the queue and now we do BFS
        int delrow[] = {-1,0,1,0};
        int delcol[] = {0,1,0,-1};

        while(!q.empty()){
            int r = q.front().first.first;
            int c = q.front().first.second;
            int dist = q.front().second;
            q.pop();
            dis[r][c] = dist;
            for(int i = 0; i<4; i++){
                int nr = r + delrow[i];
                int nc = c + delcol[i];
                if(nr>=0 && nr < n && nc >= 0 && nc < m && vis[nr][nc]==0){
                    q.push({{nr,nc},dist+1});
                    vis[nr][nc] = 1;
                } 
            }
        }
        return dis;
    }
};

int main(){
    vector<vector<int>> grid{
        {0,1,1,0},
        {1,1,0,0},
        {0,0,1,1}
    };

    Solution obj;
    auto ans = obj.nearest(grid);

    for(auto i: ans){
        for(auto j:i){
            cout << j << " ";
        }
        cout << "\n";
    }
    return 0;
}